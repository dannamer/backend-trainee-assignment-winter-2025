// Code generated by ogen, DO NOT EDIT.

package api

type APIAuthPostBadRequest ErrorResponse

func (*APIAuthPostBadRequest) aPIAuthPostRes() {}

type APIAuthPostInternalServerError ErrorResponse

func (*APIAuthPostInternalServerError) aPIAuthPostRes() {}

type APIAuthPostUnauthorized ErrorResponse

func (*APIAuthPostUnauthorized) aPIAuthPostRes() {}

type APIBuyItemGetBadRequest ErrorResponse

func (*APIBuyItemGetBadRequest) aPIBuyItemGetRes() {}

type APIBuyItemGetInternalServerError ErrorResponse

func (*APIBuyItemGetInternalServerError) aPIBuyItemGetRes() {}

// APIBuyItemGetOK is response for APIBuyItemGet operation.
type APIBuyItemGetOK struct{}

func (*APIBuyItemGetOK) aPIBuyItemGetRes() {}

type APIBuyItemGetUnauthorized ErrorResponse

func (*APIBuyItemGetUnauthorized) aPIBuyItemGetRes() {}

// Ref: #/components/schemas/AuthRequest
type AuthRequest struct {
	// Имя пользователя для аутентификации.
	Username string `json:"username"`
	// Пароль для аутентификации.
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *AuthRequest) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *AuthRequest) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *AuthRequest) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *AuthRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/AuthResponse
type AuthResponse struct {
	// JWT-токен для доступа к защищенным ресурсам.
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *AuthResponse) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AuthResponse) SetToken(val OptString) {
	s.Token = val
}

func (*AuthResponse) aPIAuthPostRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// Сообщение об ошибке, описывающее проблему.
	Errors OptString `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *ErrorResponse) GetErrors() OptString {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *ErrorResponse) SetErrors(val OptString) {
	s.Errors = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
