// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/dannamer/backend-trainee-assignment-winter-2025/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MocksendCoinStorage is a mock of sendCoinStorage interface.
type MocksendCoinStorage struct {
	ctrl     *gomock.Controller
	recorder *MocksendCoinStorageMockRecorder
}

// MocksendCoinStorageMockRecorder is the mock recorder for MocksendCoinStorage.
type MocksendCoinStorageMockRecorder struct {
	mock *MocksendCoinStorage
}

// NewMocksendCoinStorage creates a new mock instance.
func NewMocksendCoinStorage(ctrl *gomock.Controller) *MocksendCoinStorage {
	mock := &MocksendCoinStorage{ctrl: ctrl}
	mock.recorder = &MocksendCoinStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksendCoinStorage) EXPECT() *MocksendCoinStorageMockRecorder {
	return m.recorder
}

// CreateTransactions mocks base method.
func (m *MocksendCoinStorage) CreateTransactions(ctx context.Context, senderID, receiverID uuid.UUID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactions", ctx, senderID, receiverID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransactions indicates an expected call of CreateTransactions.
func (mr *MocksendCoinStorageMockRecorder) CreateTransactions(ctx, senderID, receiverID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactions", reflect.TypeOf((*MocksendCoinStorage)(nil).CreateTransactions), ctx, senderID, receiverID, amount)
}

// GetWalletByUserID mocks base method.
func (m *MocksendCoinStorage) GetWalletByUserID(ctx context.Context, userID uuid.UUID) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", ctx, userID)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MocksendCoinStorageMockRecorder) GetWalletByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MocksendCoinStorage)(nil).GetWalletByUserID), ctx, userID)
}

// GetWalletByUsername mocks base method.
func (m *MocksendCoinStorage) GetWalletByUsername(ctx context.Context, username string) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUsername", ctx, username)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUsername indicates an expected call of GetWalletByUsername.
func (mr *MocksendCoinStorageMockRecorder) GetWalletByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUsername", reflect.TypeOf((*MocksendCoinStorage)(nil).GetWalletByUsername), ctx, username)
}

// UpdateWallet mocks base method.
func (m *MocksendCoinStorage) UpdateWallet(ctx context.Context, wallet domain.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MocksendCoinStorageMockRecorder) UpdateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MocksendCoinStorage)(nil).UpdateWallet), ctx, wallet)
}

// MocktrManager is a mock of trManager interface.
type MocktrManager struct {
	ctrl     *gomock.Controller
	recorder *MocktrManagerMockRecorder
}

// MocktrManagerMockRecorder is the mock recorder for MocktrManager.
type MocktrManagerMockRecorder struct {
	mock *MocktrManager
}

// NewMocktrManager creates a new mock instance.
func NewMocktrManager(ctrl *gomock.Controller) *MocktrManager {
	mock := &MocktrManager{ctrl: ctrl}
	mock.recorder = &MocktrManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrManager) EXPECT() *MocktrManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MocktrManager) Do(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MocktrManagerMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MocktrManager)(nil).Do), arg0, arg1)
}
