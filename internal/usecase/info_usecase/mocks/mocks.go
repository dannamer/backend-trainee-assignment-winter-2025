// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/dannamer/backend-trainee-assignment-winter-2025/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockinfoStorage is a mock of infoStorage interface.
type MockinfoStorage struct {
	ctrl     *gomock.Controller
	recorder *MockinfoStorageMockRecorder
}

// MockinfoStorageMockRecorder is the mock recorder for MockinfoStorage.
type MockinfoStorageMockRecorder struct {
	mock *MockinfoStorage
}

// NewMockinfoStorage creates a new mock instance.
func NewMockinfoStorage(ctrl *gomock.Controller) *MockinfoStorage {
	mock := &MockinfoStorage{ctrl: ctrl}
	mock.recorder = &MockinfoStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinfoStorage) EXPECT() *MockinfoStorageMockRecorder {
	return m.recorder
}

// GetInventoryByUserID mocks base method.
func (m *MockinfoStorage) GetInventoryByUserID(ctx context.Context, userID uuid.UUID) ([]domain.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryByUserID indicates an expected call of GetInventoryByUserID.
func (mr *MockinfoStorageMockRecorder) GetInventoryByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryByUserID", reflect.TypeOf((*MockinfoStorage)(nil).GetInventoryByUserID), ctx, userID)
}

// GetReceivedTransactionsByUserID mocks base method.
func (m *MockinfoStorage) GetReceivedTransactionsByUserID(ctx context.Context, userID uuid.UUID) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedTransactionsByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedTransactionsByUserID indicates an expected call of GetReceivedTransactionsByUserID.
func (mr *MockinfoStorageMockRecorder) GetReceivedTransactionsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedTransactionsByUserID", reflect.TypeOf((*MockinfoStorage)(nil).GetReceivedTransactionsByUserID), ctx, userID)
}

// GetSentTransactionsByUserID mocks base method.
func (m *MockinfoStorage) GetSentTransactionsByUserID(ctx context.Context, userID uuid.UUID) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentTransactionsByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentTransactionsByUserID indicates an expected call of GetSentTransactionsByUserID.
func (mr *MockinfoStorageMockRecorder) GetSentTransactionsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentTransactionsByUserID", reflect.TypeOf((*MockinfoStorage)(nil).GetSentTransactionsByUserID), ctx, userID)
}

// GetWalletBalanceByUserID mocks base method.
func (m *MockinfoStorage) GetWalletBalanceByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalanceByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalanceByUserID indicates an expected call of GetWalletBalanceByUserID.
func (mr *MockinfoStorageMockRecorder) GetWalletBalanceByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalanceByUserID", reflect.TypeOf((*MockinfoStorage)(nil).GetWalletBalanceByUserID), ctx, userID)
}
