// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/dannamer/backend-trainee-assignment-winter-2025/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockauthStorage is a mock of authStorage interface.
type MockauthStorage struct {
	ctrl     *gomock.Controller
	recorder *MockauthStorageMockRecorder
}

// MockauthStorageMockRecorder is the mock recorder for MockauthStorage.
type MockauthStorageMockRecorder struct {
	mock *MockauthStorage
}

// NewMockauthStorage creates a new mock instance.
func NewMockauthStorage(ctrl *gomock.Controller) *MockauthStorage {
	mock := &MockauthStorage{ctrl: ctrl}
	mock.recorder = &MockauthStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthStorage) EXPECT() *MockauthStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockauthStorage) CreateUser(ctx context.Context, user domain.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockauthStorageMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockauthStorage)(nil).CreateUser), ctx, user)
}

// CreateWallet mocks base method.
func (m *MockauthStorage) CreateWallet(ctx context.Context, wallet domain.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockauthStorageMockRecorder) CreateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockauthStorage)(nil).CreateWallet), ctx, wallet)
}

// GetUserByUsername mocks base method.
func (m *MockauthStorage) GetUserByUsername(ctx context.Context, username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockauthStorageMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockauthStorage)(nil).GetUserByUsername), ctx, username)
}

// MockjwtToken is a mock of jwtToken interface.
type MockjwtToken struct {
	ctrl     *gomock.Controller
	recorder *MockjwtTokenMockRecorder
}

// MockjwtTokenMockRecorder is the mock recorder for MockjwtToken.
type MockjwtTokenMockRecorder struct {
	mock *MockjwtToken
}

// NewMockjwtToken creates a new mock instance.
func NewMockjwtToken(ctrl *gomock.Controller) *MockjwtToken {
	mock := &MockjwtToken{ctrl: ctrl}
	mock.recorder = &MockjwtTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjwtToken) EXPECT() *MockjwtTokenMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockjwtToken) GenerateJWT(ID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockjwtTokenMockRecorder) GenerateJWT(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockjwtToken)(nil).GenerateJWT), ID)
}

// MocktrManager is a mock of trManager interface.
type MocktrManager struct {
	ctrl     *gomock.Controller
	recorder *MocktrManagerMockRecorder
}

// MocktrManagerMockRecorder is the mock recorder for MocktrManager.
type MocktrManagerMockRecorder struct {
	mock *MocktrManager
}

// NewMocktrManager creates a new mock instance.
func NewMocktrManager(ctrl *gomock.Controller) *MocktrManager {
	mock := &MocktrManager{ctrl: ctrl}
	mock.recorder = &MocktrManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrManager) EXPECT() *MocktrManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MocktrManager) Do(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MocktrManagerMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MocktrManager)(nil).Do), arg0, arg1)
}

// Mockpassword is a mock of password interface.
type Mockpassword struct {
	ctrl     *gomock.Controller
	recorder *MockpasswordMockRecorder
}

// MockpasswordMockRecorder is the mock recorder for Mockpassword.
type MockpasswordMockRecorder struct {
	mock *Mockpassword
}

// NewMockpassword creates a new mock instance.
func NewMockpassword(ctrl *gomock.Controller) *Mockpassword {
	mock := &Mockpassword{ctrl: ctrl}
	mock.recorder = &MockpasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpassword) EXPECT() *MockpasswordMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *Mockpassword) ComparePassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockpasswordMockRecorder) ComparePassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*Mockpassword)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *Mockpassword) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockpasswordMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*Mockpassword)(nil).HashPassword), password)
}
