// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/dannamer/backend-trainee-assignment-winter-2025/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockbuyItemStorage is a mock of buyItemStorage interface.
type MockbuyItemStorage struct {
	ctrl     *gomock.Controller
	recorder *MockbuyItemStorageMockRecorder
}

// MockbuyItemStorageMockRecorder is the mock recorder for MockbuyItemStorage.
type MockbuyItemStorageMockRecorder struct {
	mock *MockbuyItemStorage
}

// NewMockbuyItemStorage creates a new mock instance.
func NewMockbuyItemStorage(ctrl *gomock.Controller) *MockbuyItemStorage {
	mock := &MockbuyItemStorage{ctrl: ctrl}
	mock.recorder = &MockbuyItemStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbuyItemStorage) EXPECT() *MockbuyItemStorageMockRecorder {
	return m.recorder
}

// GetMerchByItem mocks base method.
func (m *MockbuyItemStorage) GetMerchByItem(ctx context.Context, item string) (domain.Merch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchByItem", ctx, item)
	ret0, _ := ret[0].(domain.Merch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchByItem indicates an expected call of GetMerchByItem.
func (mr *MockbuyItemStorageMockRecorder) GetMerchByItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchByItem", reflect.TypeOf((*MockbuyItemStorage)(nil).GetMerchByItem), ctx, item)
}

// GetWalletByUserID mocks base method.
func (m *MockbuyItemStorage) GetWalletByUserID(ctx context.Context, userID uuid.UUID) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", ctx, userID)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MockbuyItemStorageMockRecorder) GetWalletByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockbuyItemStorage)(nil).GetWalletByUserID), ctx, userID)
}

// UpdateWallet mocks base method.
func (m *MockbuyItemStorage) UpdateWallet(ctx context.Context, wallet domain.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockbuyItemStorageMockRecorder) UpdateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockbuyItemStorage)(nil).UpdateWallet), ctx, wallet)
}

// UpsertInventory mocks base method.
func (m *MockbuyItemStorage) UpsertInventory(ctx context.Context, item string, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInventory", ctx, item, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertInventory indicates an expected call of UpsertInventory.
func (mr *MockbuyItemStorageMockRecorder) UpsertInventory(ctx, item, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInventory", reflect.TypeOf((*MockbuyItemStorage)(nil).UpsertInventory), ctx, item, userID)
}

// MocktrManager is a mock of trManager interface.
type MocktrManager struct {
	ctrl     *gomock.Controller
	recorder *MocktrManagerMockRecorder
}

// MocktrManagerMockRecorder is the mock recorder for MocktrManager.
type MocktrManagerMockRecorder struct {
	mock *MocktrManager
}

// NewMocktrManager creates a new mock instance.
func NewMocktrManager(ctrl *gomock.Controller) *MocktrManager {
	mock := &MocktrManager{ctrl: ctrl}
	mock.recorder = &MocktrManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrManager) EXPECT() *MocktrManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MocktrManager) Do(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MocktrManagerMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MocktrManager)(nil).Do), arg0, arg1)
}
